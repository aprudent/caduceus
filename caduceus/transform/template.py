from caduceus.transform.templateEntity import CaduceusTemplateEntity
from caduceus.transform.templateHtmlTag import CaduceusTemplateHtmlTag
from caduceus.caduceusHelpers import CaduceusHelper
from time import gmtime, strftime
import os

class CaduceusTemplate(CaduceusTemplateEntity):
	def __init__(self, path = None, rootPath = None, caduceusPath = None):
		CaduceusTemplateEntity.__init__(self)
		self._path = path
		self._rootPath = rootPath
		self._caduceusPath = caduceusPath
		self._refHeadTag = None
		self._refHtmlTag = None
		
	def setHeadTagRef(self, token):
		self._refHeadTag = token
		
	def setHtmlTagRef(self, token):
		self._refHtmlTag = token
		
	def render(self, dictGlob, dictLoc, results):
		if self._caduceusPath:
			# Template is document root (ie: not a partial)
			
			cssPath = CaduceusHelper.getHtmlPathToResource(self._path, self._rootPath, "caduceus.css")
			
			stylesheetToken = CaduceusTemplateHtmlTag("link",
				[	("rel", "stylesheet"),
					("href", cssPath),
					("type", "text/css")],
				True)
			
			if self._refHeadTag:
				# Insert Caduceus style sheet as first child
				self._refHeadTag.addTokenFirst(stylesheetToken)
			elif self._refHtmlTag:
				head = self._refHeadTag.addTokenFirst(CaduceusTemplateHtmlTag("head", []))
				head.addTokenFirst(stylesheetToken)
				
			return "<!-- Generated By Caduceus (%s) -->\n\n%s" % \
					(	strftime("%a, %d %b %Y %H:%M:%S +0000", gmtime()),
						CaduceusTemplateEntity.render(self, dictGlob, dictLoc, results))
		else:
			# Template is a partial
			# Find head tag
			head = self.findFirstTag('head')
			if head:
				cssPath = CaduceusHelper.getHtmlPathToResource(self._path, self._rootPath, "caduceus.css")
				# print("#### css path %s / %s / %s" % (self._path, self._rootPath, cssPath))
				stylesheetToken = CaduceusTemplateHtmlTag("link",
					[	("rel", "stylesheet"),
						("href", cssPath),
						("type", "text/css")],
					True)
				head.addTokenFirst(stylesheetToken)
		
			#return "<!-- Generated By Caduceus (%s) -->\n\n%s" % \
			#		(	strftime("%a, %d %b %Y %H:%M:%S +0000", gmtime()),
			#			CaduceusTemplateEntity.render(self, dictGlob, dictLoc, results))
		
		return CaduceusTemplateEntity.render(self, dictGlob, dictLoc, results)
	
